/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";

// Create Virtual Routes

const UpcomingLazyImport = createFileRoute("/upcoming")();
const TodayLazyImport = createFileRoute("/today")();
const InboxLazyImport = createFileRoute("/inbox")();
const FiltersLabelsLazyImport = createFileRoute("/filters-labels")();
const AboutLazyImport = createFileRoute("/about")();
const IndexLazyImport = createFileRoute("/")();

// Create/Update Routes

const UpcomingLazyRoute = UpcomingLazyImport.update({
	id: "/upcoming",
	path: "/upcoming",
	getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/upcoming.lazy").then((d) => d.Route));

const TodayLazyRoute = TodayLazyImport.update({
	id: "/today",
	path: "/today",
	getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/today.lazy").then((d) => d.Route));

const InboxLazyRoute = InboxLazyImport.update({
	id: "/inbox",
	path: "/inbox",
	getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/inbox.lazy").then((d) => d.Route));

const FiltersLabelsLazyRoute = FiltersLabelsLazyImport.update({
	id: "/filters-labels",
	path: "/filters-labels",
	getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/filters-labels.lazy").then((d) => d.Route));

const AboutLazyRoute = AboutLazyImport.update({
	id: "/about",
	path: "/about",
	getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/about.lazy").then((d) => d.Route));

const IndexLazyRoute = IndexLazyImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route));

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/": {
			id: "/";
			path: "/";
			fullPath: "/";
			preLoaderRoute: typeof IndexLazyImport;
			parentRoute: typeof rootRoute;
		};
		"/about": {
			id: "/about";
			path: "/about";
			fullPath: "/about";
			preLoaderRoute: typeof AboutLazyImport;
			parentRoute: typeof rootRoute;
		};
		"/filters-labels": {
			id: "/filters-labels";
			path: "/filters-labels";
			fullPath: "/filters-labels";
			preLoaderRoute: typeof FiltersLabelsLazyImport;
			parentRoute: typeof rootRoute;
		};
		"/inbox": {
			id: "/inbox";
			path: "/inbox";
			fullPath: "/inbox";
			preLoaderRoute: typeof InboxLazyImport;
			parentRoute: typeof rootRoute;
		};
		"/today": {
			id: "/today";
			path: "/today";
			fullPath: "/today";
			preLoaderRoute: typeof TodayLazyImport;
			parentRoute: typeof rootRoute;
		};
		"/upcoming": {
			id: "/upcoming";
			path: "/upcoming";
			fullPath: "/upcoming";
			preLoaderRoute: typeof UpcomingLazyImport;
			parentRoute: typeof rootRoute;
		};
	}
}

// Create and export the route tree

export interface FileRoutesByFullPath {
	"/": typeof IndexLazyRoute;
	"/about": typeof AboutLazyRoute;
	"/filters-labels": typeof FiltersLabelsLazyRoute;
	"/inbox": typeof InboxLazyRoute;
	"/today": typeof TodayLazyRoute;
	"/upcoming": typeof UpcomingLazyRoute;
}

export interface FileRoutesByTo {
	"/": typeof IndexLazyRoute;
	"/about": typeof AboutLazyRoute;
	"/filters-labels": typeof FiltersLabelsLazyRoute;
	"/inbox": typeof InboxLazyRoute;
	"/today": typeof TodayLazyRoute;
	"/upcoming": typeof UpcomingLazyRoute;
}

export interface FileRoutesById {
	__root__: typeof rootRoute;
	"/": typeof IndexLazyRoute;
	"/about": typeof AboutLazyRoute;
	"/filters-labels": typeof FiltersLabelsLazyRoute;
	"/inbox": typeof InboxLazyRoute;
	"/today": typeof TodayLazyRoute;
	"/upcoming": typeof UpcomingLazyRoute;
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths: "/" | "/about" | "/filters-labels" | "/inbox" | "/today" | "/upcoming";
	fileRoutesByTo: FileRoutesByTo;
	to: "/" | "/about" | "/filters-labels" | "/inbox" | "/today" | "/upcoming";
	id: "__root__" | "/" | "/about" | "/filters-labels" | "/inbox" | "/today" | "/upcoming";
	fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
	IndexLazyRoute: typeof IndexLazyRoute;
	AboutLazyRoute: typeof AboutLazyRoute;
	FiltersLabelsLazyRoute: typeof FiltersLabelsLazyRoute;
	InboxLazyRoute: typeof InboxLazyRoute;
	TodayLazyRoute: typeof TodayLazyRoute;
	UpcomingLazyRoute: typeof UpcomingLazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
	IndexLazyRoute: IndexLazyRoute,
	AboutLazyRoute: AboutLazyRoute,
	FiltersLabelsLazyRoute: FiltersLabelsLazyRoute,
	InboxLazyRoute: InboxLazyRoute,
	TodayLazyRoute: TodayLazyRoute,
	UpcomingLazyRoute: UpcomingLazyRoute,
};

export const routeTree = rootRoute
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/filters-labels",
        "/inbox",
        "/today",
        "/upcoming"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/filters-labels": {
      "filePath": "filters-labels.lazy.tsx"
    },
    "/inbox": {
      "filePath": "inbox.lazy.tsx"
    },
    "/today": {
      "filePath": "today.lazy.tsx"
    },
    "/upcoming": {
      "filePath": "upcoming.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
